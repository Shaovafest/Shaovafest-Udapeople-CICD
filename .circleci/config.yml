version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_ID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/73K3MtcruUyU1evnAv77aj/migration_<< parameters.workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: build frontend
          command: |
            cd frontend
            npm install
            npm run build     
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build backend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: basic_success_1    
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
    #  - slack/notify:
    #      event: fail
    #      template: basic_fail_1
    #  - slack/notify:
    #      event: pass
    #      template: basic_success_1 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/*
      - destroy-environment:
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"   
         

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [08:30:0c:48:1e:65:16:21:45:56:ec:5f:0b:d7:68:50]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl git openssh-client
            pip install awscli
      - run:
          name: Configure server
          command: |
            echo NODE_ENV=production >> ~/project/backend/.env
            echo ENVIRONMENT=production >> ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env

            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - destroy-environment:
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"  

  run-migrations:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip nodejs npm curl git openssh-client
            pip install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/73K3MtcruUyU1evnAv77aj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - revert-migrations: 
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"     
     

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl git openssh-client
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations: 
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [08:30:0c:48:1e:65:16:21:45:56:ec:5f:0b:d7:68:50]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl git openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files                          
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deploy-backend
      - destroy-environment:
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations: 
          workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}" 

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip nodejs npm curl git openssh-client 
            pip install awscli
      - run:
          name: Get backend url / smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # - destroy-environment:
      #     workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      # - revert-migrations: 
      #     workflow_ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
                

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
